{"version":3,"file":"a7de6d14c1276eaaa5f004764b84743b9226c46d-363d071b309023a7386c.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Main/PostItem.tsx","webpack://gatsby-starter-default/./src/hooks/useInfiniteScroll.tsx","webpack://gatsby-starter-default/./src/components/Main/PostList.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { Link } from 'gatsby'\r\nimport { PostFrontmatterType } from 'types/PostItem.types'\r\nimport { GatsbyImage } from 'gatsby-plugin-image'\r\n\r\ntype PostItemProps = PostFrontmatterType & { link: string }\r\n\r\nconst PostItemWrapper = styled(Link)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.3);\r\n  transition: 0.3s box-shadow;\r\n  cursor: pointer;\r\n  background-color: #ffffff;\r\n\r\n  &:hover {\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n  }\r\n`\r\n\r\nconst ThumbnailImage = styled(GatsbyImage)`\r\n  width: 100.2%;\r\n  height: 220px;\r\n  border-radius: 0 0 10px 10px;\r\n  -webkit-mask-image: url(\"/wave.png\");\r\n  -webkit-mask-repeat: no-repeat;\r\n  -webkit-mask-size: 100% 100%;\r\n`\r\n\r\nconst PostItemContent = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 15px;\r\n`\r\n\r\nconst Title = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  margin-bottom: 3px;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  overflow-wrap: break-word;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n  height: 46px;\r\n`\r\n\r\nconst Date = styled.div`\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  opacity: 0.7;\r\n`\r\n\r\nconst Category = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-top: 10px;\r\n  margin: 10px -5px;\r\n`\r\n\r\nconst CategoryItem = styled.div`\r\n  margin: 2.5px 5px;\r\n  padding: 3px 5px;\r\n  border-radius: 3px;\r\n  background: #928490;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  color: white;\r\n`\r\n\r\nconst Summary = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  margin-top: auto;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  overflow-wrap: break-word;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 16px;\r\n  opacity: 0.8;\r\n`\r\n\r\nconst PostItem: FunctionComponent<PostItemProps> = function ({\r\n  title,\r\n  date,\r\n  categories,\r\n  summary,\r\n  thumbnail: { \r\n    childImageSharp: { gatsbyImageData } \r\n  },\r\n  link,\r\n}) {\r\n  return (\r\n    <PostItemWrapper to={link}>\r\n      <PostItemContent>\r\n        <Title>{title}</Title>\r\n        <Date>{date}</Date>\r\n        <Category>\r\n          {categories.map(category => (\r\n            <CategoryItem key={category}>{category}</CategoryItem>\r\n          ))}\r\n        </Category>\r\n        <Summary>{summary}</Summary>\r\n      </PostItemContent>\r\n      <ThumbnailImage image={gatsbyImageData} alt=\"Post Item Image\" />\r\n    </PostItemWrapper>\r\n  )\r\n}\r\n\r\nexport default PostItem","import { MutableRefObject, useState, useEffect, useRef, useMemo } from 'react'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\n\r\nexport type useInfiniteScrollType = {\r\n  containerRef: MutableRefObject<HTMLDivElement | null>\r\n  postList: PostListItemType[]\r\n}\r\n\r\nconst NUMBER_OF_ITEMS_PER_PAGE = 10\r\n\r\nconst useInfiniteScroll = function (\r\n  selectedCategory: string,\r\n  posts: PostListItemType[],\r\n  maxPostNum: number,\r\n): useInfiniteScrollType {\r\n\r\n  const containerRef: MutableRefObject<HTMLDivElement | null> = useRef<HTMLDivElement>(null)\r\n  const observer: MutableRefObject<IntersectionObserver | null> =\r\n    useRef<IntersectionObserver>(null)\r\n  const [count, setCount] = useState<number>(1)\r\n\r\n  if (maxPostNum !== 0){\r\n    return {\r\n      containerRef,\r\n      postList: posts.slice(0, maxPostNum)\r\n    }\r\n  }\r\n\r\n  const postListByCategory = useMemo<PostListItemType[]>(\r\n    () =>\r\n      posts.filter(({ node: { frontmatter: { categories } } }: PostListItemType) =>\r\n        ( selectedCategory === 'All' ) ? true : categories.includes(selectedCategory)\r\n      ),\r\n    [selectedCategory],\r\n  )\r\n\r\n  useEffect(() => {\r\n    observer.current = new IntersectionObserver((entries, observer) => {\r\n      if (!entries[0].isIntersecting) return\r\n\r\n      setCount(value => value + 1)\r\n      observer.unobserve(entries[0].target)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => setCount(1), [selectedCategory])\r\n\r\n  useEffect(() => {\r\n    if (\r\n      NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\r\n      containerRef.current === null ||\r\n      containerRef.current.children.length === 0 ||\r\n      observer.current === null\r\n    )\r\n      return\r\n\r\n    observer.current.observe(\r\n      containerRef.current.children[containerRef.current.children.length - 1],\r\n    )\r\n  }, [count, selectedCategory])\r\n\r\n  return {\r\n    containerRef,\r\n    postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE),\r\n  }\r\n}\r\n\r\nexport default useInfiniteScroll","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport PostItem from 'components/Main/PostItem'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\nimport useInfiniteScroll, { useInfiniteScrollType } from 'hooks/useInfiniteScroll'\r\n\r\ntype PostListProps = {\r\n  selectedCategory: string\r\n  posts: PostListItemType[]\r\n  maxPostNum: number\r\n}\r\n\r\nconst PostListWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n  grid-gap: 40px;\r\n  width: 1180px;\r\n  margin: 0 auto;\r\n  padding: 50px 0;\r\n  \r\n  @media (max-width: 1200px) {\r\n    grid-template-columns: 1fr 1fr;\r\n    width: 90%;\r\n    padding: 50px 20px;\r\n  }\r\n  @media (max-width: 768px) {\r\n    grid-template-columns: 1fr;\r\n    width: 90%;\r\n    padding: 50px 20px;\r\n  }\r\n`\r\n\r\nconst PostList: FunctionComponent<PostListProps> = function ({\r\n  selectedCategory,\r\n  posts,\r\n  maxPostNum,\r\n}) {\r\n\r\n  const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(\r\n    selectedCategory,\r\n    posts,\r\n    maxPostNum,\r\n  )\r\n\r\n  return (\r\n    <PostListWrapper ref={containerRef}>\r\n      {postList.map(\r\n        ({\r\n          node: {\r\n            id,\r\n            fields: { slug },\r\n            frontmatter,\r\n          },\r\n        }: PostListItemType) => (\r\n          <PostItem {...frontmatter} link={slug} key={id} />\r\n        ),\r\n      )}\r\n    </PostListWrapper>\r\n  )\r\n}\r\n\r\nexport default PostList"],"names":["PostItemWrapper","_styled","Link","process","ThumbnailImage","GatsbyImage","PostItemContent","Title","Date","Category","CategoryItem","Summary","title","date","categories","summary","gatsbyImageData","thumbnail","childImageSharp","link","___EmotionJSX","to","map","category","key","image","alt","selectedCategory","posts","maxPostNum","containerRef","useRef","observer","useState","count","setCount","postList","slice","postListByCategory","useMemo","filter","node","frontmatter","includes","useEffect","current","IntersectionObserver","entries","isIntersecting","value","unobserve","target","length","children","observe","PostListWrapper","useInfiniteScroll","ref","id","slug","fields","PostItem"],"sourceRoot":""}