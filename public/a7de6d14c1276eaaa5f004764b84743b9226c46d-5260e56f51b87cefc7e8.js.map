{"version":3,"file":"a7de6d14c1276eaaa5f004764b84743b9226c46d-5260e56f51b87cefc7e8.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Main/PostItem.tsx","webpack://gatsby-starter-default/./src/hooks/useInfiniteScroll.tsx","webpack://gatsby-starter-default/./src/components/Main/PostList.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\nimport { PostFrontmatterType } from 'types/PostItem.types'\nimport { GatsbyImage } from 'gatsby-plugin-image'\n\ntype PostItemProps = PostFrontmatterType & { link: string }\n\nconst PostItemWrapper = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  border-radius: 10px;\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.3);\n  transition: 0.3s box-shadow;\n  cursor: pointer;\n  background-color: #ffffff;\n\n  &:hover {\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n  }\n`\n\nconst ThumbnailImage = styled(GatsbyImage)`\n  width: 100.2%;\n  height: 220px;\n  border-radius: 0 0 10px 10px;\n  -webkit-mask-image: url(\"/wave.png\");\n  -webkit-mask-repeat: no-repeat;\n  -webkit-mask-size: 100% 100%;\n`\n\nconst PostItemContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n`\n\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-bottom: 3px;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 20px;\n  font-weight: 700;\n  height: 56px;\n`\n\nconst Date = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  opacity: 0.7;\n`\n\nconst Category = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 10px;\n  margin: 10px -5px;\n`\n\nconst CategoryItem = styled.div`\n  margin: 2.5px 5px;\n  padding: 3px 5px;\n  border-radius: 3px;\n  background: #928490;\n  font-size: 14px;\n  font-weight: 700;\n  color: white;\n`\n\nconst Summary = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 16px;\n  opacity: 0.8;\n`\n\nconst PostItem: FunctionComponent<PostItemProps> = function ({\n  title,\n  date,\n  categories,\n  summary,\n  thumbnail: { \n    childImageSharp: { gatsbyImageData } \n  },\n  link,\n}) {\n  return (\n    <PostItemWrapper to={link}>\n      <PostItemContent>\n        <Title>{title}</Title>\n        <Date>{date}</Date>\n        <Category>\n          {categories.map(category => (\n            <CategoryItem key={category}>{category}</CategoryItem>\n          ))}\n        </Category>\n        <Summary>{summary}</Summary>\n      </PostItemContent>\n      <ThumbnailImage image={gatsbyImageData} alt=\"Post Item Image\" />\n    </PostItemWrapper>\n  )\n}\n\nexport default PostItem","import { MutableRefObject, useState, useEffect, useRef, useMemo } from 'react'\nimport { PostListItemType } from 'types/PostItem.types'\n\nexport type useInfiniteScrollType = {\n  containerRef: MutableRefObject<HTMLDivElement | null>\n  postList: PostListItemType[]\n}\n\nconst NUMBER_OF_ITEMS_PER_PAGE = 10\n\nconst useInfiniteScroll = function (\n  selectedCategory: string,\n  posts: PostListItemType[],\n  maxPostNum: number,\n): useInfiniteScrollType {\n\n  const containerRef: MutableRefObject<HTMLDivElement | null> = useRef<HTMLDivElement>(null)\n  const observer: MutableRefObject<IntersectionObserver | null> =\n    useRef<IntersectionObserver>(null)\n  const [count, setCount] = useState<number>(1)\n\n  if (maxPostNum !== 0){\n    return {\n      containerRef,\n      postList: posts.slice(0, maxPostNum)\n    }\n  }\n\n  const postListByCategory = useMemo<PostListItemType[]>(\n    () =>\n      posts.filter(({ node: { frontmatter: { categories } } }: PostListItemType) =>\n        ( selectedCategory === 'All' ) ? true : categories.includes(selectedCategory)\n      ),\n    [selectedCategory],\n  )\n\n  useEffect(() => {\n    observer.current = new IntersectionObserver((entries, observer) => {\n      if (!entries[0].isIntersecting) return\n\n      setCount(value => value + 1)\n      observer.unobserve(entries[0].target)\n    })\n  }, [])\n\n  useEffect(() => setCount(1), [selectedCategory])\n\n  useEffect(() => {\n    if (\n      NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\n      containerRef.current === null ||\n      containerRef.current.children.length === 0 ||\n      observer.current === null\n    )\n      return\n\n    observer.current.observe(\n      containerRef.current.children[containerRef.current.children.length - 1],\n    )\n  }, [count, selectedCategory])\n\n  return {\n    containerRef,\n    postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE),\n  }\n}\n\nexport default useInfiniteScroll","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport PostItem from 'components/Main/PostItem'\nimport { PostListItemType } from 'types/PostItem.types'\nimport useInfiniteScroll, { useInfiniteScrollType } from 'hooks/useInfiniteScroll'\n\ntype PostListProps = {\n  selectedCategory: string\n  posts: PostListItemType[]\n  maxPostNum: number\n}\n\nconst PostListWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 40px;\n  width: 1180px;\n  margin: 0 auto;\n  padding: 50px 0;\n  \n  @media (max-width: 1200px) {\n    grid-template-columns: 1fr 1fr;\n    width: 90%;\n    padding: 50px 20px;\n  }\n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    width: 90%;\n    padding: 50px 20px;\n  }\n`\n\nconst PostList: FunctionComponent<PostListProps> = function ({\n  selectedCategory,\n  posts,\n  maxPostNum,\n}) {\n\n  const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(\n    selectedCategory,\n    posts,\n    maxPostNum,\n  )\n\n  return (\n    <PostListWrapper ref={containerRef}>\n      {postList.map(\n        ({\n          node: {\n            id,\n            fields: { slug },\n            frontmatter,\n          },\n        }: PostListItemType) => (\n          <PostItem {...frontmatter} link={slug} key={id} />\n        ),\n      )}\n    </PostListWrapper>\n  )\n}\n\nexport default PostList"],"names":["PostItemWrapper","_styled","Link","process","ThumbnailImage","GatsbyImage","PostItemContent","Title","Date","Category","CategoryItem","Summary","title","date","categories","summary","gatsbyImageData","thumbnail","childImageSharp","link","___EmotionJSX","to","map","category","key","image","alt","selectedCategory","posts","maxPostNum","containerRef","useRef","observer","useState","count","setCount","postList","slice","postListByCategory","useMemo","filter","node","frontmatter","includes","useEffect","current","IntersectionObserver","entries","isIntersecting","value","unobserve","target","length","children","observe","PostListWrapper","useInfiniteScroll","ref","id","slug","fields","PostItem"],"sourceRoot":""}